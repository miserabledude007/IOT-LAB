FILE NAME:- esp8266_mqtt_sensor_control.ino

#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// Pin definitions
const int ledPin = 14;      // Pin for the LED
const int inputPin = 13;    // Pin for the sensor
const int ldrPin = A0;      // Pin for the LDR

// WiFi and MQTT configurations
const char* ssid = "Cisco48681";
const char* password = "villanova";
const char* mqtt_server = "153.104.206.108";

// Initialize WiFi and MQTT clients
WiFiClient espClient;
PubSubClient client(espClient);

long lastMsg = 0;
char msg[150];
int value = 0;
char msg1[150];

// Function to connect to WiFi
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println();
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

// MQTT callback function
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  
  String message;
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  
  Serial.println("came into callback. The published message from Pi is " + message);

  if (message == "1") {
    digitalWrite(ledPin, LOW); // Turn the LED on (active low)
  } else {
    digitalWrite(ledPin, HIGH); // Turn the LED off
  }
}

// Function to reconnect to MQTT broker
void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP8266Client")) {
      Serial.println("connected");
      client.publish("outTopic", "hello world");
      client.subscribe("inTopic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);  // Initialize LED pin as output
  pinMode(inputPin, INPUT); // Initialize sensor pin as input
  pinMode(ldrPin, INPUT);   // Initialize LDR pin as input

  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Read LDR value
  int ldrValue = analogRead(ldrPin);
  delay(1000);
  Serial.println(ldrValue);

  // Publish LDR value to MQTT topic
  snprintf(msg, sizeof(msg), "LDRValue=%d", ldrValue);
  client.publish("ldrvalue", msg);

  // Read sensor value
  int val = digitalRead(inputPin);

  // Check conditions and update LED and MQTT
  if (val == HIGH || ldrValue < 1000) {
    digitalWrite(ledPin, HIGH); // Turn LED ON
    client.publish("outTopic", "Motion detected");
    delay(2000);
  } else {
    digitalWrite(ledPin, LOW); // Turn LED OFF
    // Uncomment if you want to notify when motion ends
    // client.publish("outTopic", "Motion ended!");
  }
}
